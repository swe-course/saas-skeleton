const path = require('path');
const fs = require('fs');

module.exports = {
  options: async (tln, args) => {},
  env: async (tln, env) => {
    env.TLN_UID = 'io.project1';
    env.TLN_VERSION = fs.readFileSync(path.join(__dirname, 'version'), 'utf8').trim();

    env.TLN_DOCKER_REGISTRY = 'registry.digitalocean.com/projects-cr';
  },
  dotenvs: async (tln) => [],
  inherits: async (tln) => [],
  depends: async (tln) => [],
  steps: async (tln) => [
    { id: 'prereq-app', builder: async (tln, script) => {
        script.set([`
tln install web/portal:services/auth --depends
        `]);
      }
    },
    { id: 'init-app', builder: async (tln, script) => {
        script.set([`
tln init web/portal
tln get services/auth
        `]);
      }
    },
    { id: 'build-app', builder: async (tln, script) => {
        script.set([`
tln build web/portal:services/auth
        `]);
      }
    },
    { id: 'test-app', builder: async (tln, script) => {
        script.set([`
tln test web/portal:services/auth
        `]);
      }
    },
    { id: 'package-app', builder: async (tln, script) => {
        script.set([`
tln docker-build:docker-tag:docker-push web/portal:services/auth
docker images
        `]);
      }
    },
    { id: 'construct-infr', builder: async (tln, script) => {
        script.set([`
tln construct ii/do
tln exec ii/do -c "tln nginx-ingress-install@k8s app"
        `]);
      }
    },
    { id: 'status-infr', builder: async (tln, script) => {
        script.set([`
tln exec ii/do -c "tln nginx-ingress-status@k8s app"
        `]);
      }
    },
    { id: 'deploy-app', builder: async (tln, script) => {
        script.set([`
tln create-secrets app
tln exec ii/do -c "tln deploy app"
        `]);
      }
    },
    { id: 'e2e-app', builder: async (tln, script) => {
        script.set([`
        `]);
      }
    },
    { id: 'undeploy-app', builder: async (tln, script) => {
        script.set([`
tln exec ii/do -c "tln undeploy app"
        `]);
      }
    },
    { id: 'deconstruct-infr', builder: async (tln, script) => {
        script.set([`
tln deconstruct ii/do
        `]);
      }
    },

  ],
  components: async (tln) => []
}